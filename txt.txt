프리 패치칭 쿼리 
    캐시가 존재
    쿼리 클라이언트
    서버


셋 쿼리 클라이언트
    쿼리 클라이언트
    클라이언트
    캐시 존재

플레이스 홀더 데이타
    유즈 쿼리
    클라이언트
    캐시 존재가 아니다.

이니셜 데이터
    유즈쿼리
    크라이언트
    캐시가 존재


프리 패칭
    넥스트페이지
    데이터르 ㄹ미리 가져온다.
    안전하다.

유즈쿼리로 호출 하지 않으면
    캐시시간내 유용하지 않은 데이터를 저장하지 않는다.
    캐시시간 5분이네 트리트먼트를 캐시 시간을 늘릴수 있다.

    유즈 쿼리
    일회성
    쿼리 클라이언트로 리턴
    유즈쿼리 훅 사용

유즈 쿼리
    불가능한 날짜
    최적화 메모제이션을 리액트 쿼리는 
    
스테이트 



필터 리액트 쿼리는
    거릐지 않는 데이터와 피;ㄹ터 현재 상태 데이터를 
    리액트 쿼리 캐싱을 얻으려면 유즈 콜백이 필요
    많은 데이터가 필요할수도 있기 때문에 캐싱이 필요

필터가 올로 됭ㅆ으면
    필터 함수를 필용 ㅓㅇㅂㅅ다
    showall 트루면 상관 없다.

창으 ㄹ재 포커스
    업데이트 여부
    리패칭 
    사용자 조치가 없더라고 데이터 업데이트

리패치 온 마운트
    ㄹ

리페칭 유즈 쿼리 
    데이터 불러오는데 호출하는 방법

리페칭을 원할수도있다
    스테일 시간을 길게 하거나
    리페칭 은 신중
        변동이 적은 데이터에 적용

    예약이나 사용자에겐 헐씬 중요하다.
        네트워크 호출을 줄일수 있다.
        데이터가 어떻게 실시간일수가 있냐?


ㅖ약을 하게 되면 리패칭 
    실시간으로 리페칭 되는 게 필요하다.
    만료 시간 0


쿼리 특징
    캐싱을 유즈 콜백ㅇ으로 함수의 안정성
    리페칭 옵션을 살펴보고
    전역 옵션 추가 오버라이드
    서버에서 변경
        특정 폴링을 가져오게 했다.

어쓰에서 유즈 쿼리 통합
    리무브 ㅁ쿼리
    인증 부분 유동적인
    jswon web token
        클라우드 기반 
        사용자 명 , 비밀 번호
        토큰을 보내능 형식
    보안
        일치함 
        서버 설치 할대 암호
            토큰
        사용자의 객체 저장
            토큰이 담겨있다
        로컬스토리지
        로그아웃
    리액트 쿼리와 상호 작용
    누가 데이터를 가지나?

    리액트 쿼리책임은 서버 관리
    어쓰에서   
        사인인
        사인 아웃

useUser 
    리액트 
    사용자 데이터를 반환
    로컬스토리지
    새로고침시 유지

업데이트 
    넷 쿼리 데이타
    로컬 스토리지
    온 서세스 콜백
        넷 쿼리 데이타.
            쿼리 펑션
복잡한다
    불필요한 데이터가 있을수 있다
    어쓰프로바이더에도 저장을 해야한다.
    레거치 프로젝트는 어스 프로바이더, 캐시에 저장하는게 합당

의존 쿼리
    예약 데이터
    참 결과에 따라 관리



로그아웃 시 
    예약 데이터 삭제
    쿼라클라이언트.리무브 쿼리는
셋 쿼리 데이타  온서세스 발생
    리무브 



뮤테이션 
    새객채르 ㄹ반환
    낙관적인 롤백 할수 있다
    변이 대한 전역 패칭, 오류 처리
        onError 데러 클라이언트,
            디폴트도 있다.
    이즈 뮤테이팅

업데이크 캐쉬를 뮤테이션으로 반응하기
    유즈패치유저
        서버에서 사용자를 업데이트 하는데 사용
        온서세스
        쿼리 캐시를 업데이트 한다.
        쿼리 캣;ㅣ 업데이트

    
옵티먹스 업데이트  
    사용자 캐시 관리
    변이가 작동
    업데이트를 위한 시간이 필요없다.
    민감하다

    단점
        실패시 코드가 복잡해진다.
        되돌려야 한다.

    유즈 뮤테이션
        콜백이 있다


    
옵티머스 업데이트
    변형을 수행하기전에 업티머스 업데이트를 하면 변형이 실패 될수도 있다.
    실패 사례를 다시 가져오기를 트리거 하여 실제 서버 상태로 되 되돌릴수있다.
    일부 상황에서는 작동 안될수 있으므르, 변형 오류는 다시 가져오기, 롤백을 해야한다.

뮤테이트 콜
    진행중인 쿼리를 취소 
    핸들러 
    업데이트
        서세스
            밸리데이터를 무효화
        에러시
            온 에러 발생
                콘텍스트를 사용

    쿼리 취소
        쿼리 취소 할수 있다
        취소 프로퍼티를 프로미스를 반환
            쿼리 취소 함수
                액시오스 취소 토큰 사용

            리액트 쿼리는 프라미스
                쿼리 취소 요청
                    취소 함수 실행



라액트 쿼리는
    일부적으로 자동으로 끊긴다
    컴포넌트가 헤재
    리액트 쿼리 액시오스 쿼리를 수동으로 중단
    리액트 쿼리 3.30.0 버전이상이어야지만 메소 드 관리
    액시오스 호출 22.0 이상


뮤테이션 섬머리
    데이터 유지 하는 방법
        큐ㅗ라룰 뮤효화 하면 캐시를 지우고 리페치 시작
        쿼리 클라이언트로 셋 쿼리 데이타를 사용하여 변이함수로부터 변환된 데이터 캐시를 업데이트 할수 있다.
        셋 쿼리 데이타를 실행하는 업데이트 유저를 사용하여 진행
        아니면 좀 더 개입되는 편이지만 페이지 상에서 다수의 영역에 
        데이터를 사용하는 경우 반응성을 개선하는 옵티머스 업데이트를 진행 할수도 있다
            센드 뮤테이션
            즉 변이를 전송하고 발쉰 쿼리를 모두 취소하여 
            옵티머스 업데이트를 서버 측 옛 데이터를 받지 않는다
            사용자가 입력한 데이터로 캐시를 옵티머스 업데이트를 한다.
            롤백하는경우를 대비하여 기존의 값은 저장해 둔다.
            변이가 실패할경우 롤백을 위해 에러 핸들러에 해당값을 사용한다.

리액트 쿼리 테스트
    테스팅 라이브러리 
    사용자가 소프트웨어와 어떻게 상호작용 하는지 


mock
    네트워크 호출을 흉내
    목적
        네트워크 차단
        핸들러 반환
    ㅎㅎ출 발생하지 않는다
    
npm i msw 
    
